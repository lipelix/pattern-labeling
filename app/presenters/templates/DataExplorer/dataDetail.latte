{block content}
<div class="container">
	<h1 class="page-header">{_dataexplorer.heading}</h1>

	<div>
		<table class="table table-striped">
			<thead>
			<tr>
				<th>{_dataexplorer.data_created_at}</th>
				<th>{_dataexplorer.marked_login}</th>
				<th>{_dataexplorer.groups}</th>
				<th></th>
			</tr>
			</thead>

			<tbody>
			<tr class="active">
				<td class="vert-align col-md-2">{$data->created_at}</td>
				<td class="vert-align col-md-2">{$data->login}</td>
				<td class="vert-align col-md-6">{$data->groups}</td>
				<td class="vert-align col-md-2">
					<button class="btn btn-info" onclick="window.location.href = {link export!, id => $data->id}">{_dataexplorer.marked_export}</button>
					<button class="btn btn-danger" onclick="deleteData()">{_dataexplorer.delete}</button>
				</td>
			</tr>
			<tbody>
		</table>
	</div>

	<div id="editor-area"></div>

	<script n:if="isset($data->points)">
		//Width and height
		var w = h = 800;
		var axisPadding = 0;
		var dataPadding = 30;
		var g = null;
		var pathIdIterator = 0;
		var lineIdIterator = 0;
		var paths = [];

		var coords = [];
		var nodesIdIterator = 0;
		var lineCoords = [];
		var LINE_SNAPPING_DIST = 30;
		var canvasState = "DRAW";

		var polygons = {$data->polygons};
		var dataset = {$data->points};
//		var dataset = [[-0.070747607178829,0.23844585851024],[0.1219672961116,0.36114493398331],[0.10579325383348,0.43370012844484],[0.32775251405821,0.11093897126695]];

		//Create scale functions
		var xScale = d3.scale.linear()
						.domain([d3.min(dataset, function(d) { return d[0]; }), d3.max(dataset, function(d) { return d[0]; })])
						.range([0 + dataPadding, w - dataPadding]);

		var yScale = d3.scale.linear()
						.domain([d3.min(dataset, function(d) { return d[1]; }), d3.max(dataset, function(d) { return d[1]; })])
						.range([0 + dataPadding, h - dataPadding]);

		//Create SVG element
		svg = d3.select("#editor-area")
						.append("svg")
						.attr("width", w)
						.attr("height", h)
						.attr("style", "border: 1px solid;");

		line = d3.svg.line();

		function testPointsInPolygon(id) {
			dot.each(function() {
				var point = [d3.select(this).attr("cx"), d3.select(this).attr("cy")];
				if (pointInPolygon(point, polygons[id].nodes)) {
					d3.select(this).classed("selected", true)
				} else {
					d3.select(this).classed("selected", false)
				}
			});
		}

		function drawPolygons() {
			var node, prevNode, line;

			console.log(polygons);
			for (var i = 0; i < polygons.length; i++) {
				for (var j = 1; j < polygons[i].nodes.length; j++) {
					node = polygons[i].nodes[j];
					prevNode = polygons[i].nodes[j - 1];
					line = svg.select("g").append("line")
									.attr("x1", prevNode[0])
									.attr("y1", prevNode[1])
									.attr("x2", node[0])
									.attr("y2", node[1]);
				}
				line = svg.select("g").append("line")
								.attr("x1", polygons[i].nodes[0][0])
								.attr("y1", polygons[i].nodes[0][1])
								.attr("x2", polygons[i].nodes[polygons[i].nodes.length-1][0])
								.attr("y2", polygons[i].nodes[polygons[i].nodes.length-1][1]);
			}
		}

		var dotIdIterator = 0;
		dot = svg.selectAll("circle")
						.data(dataset)
						.enter()
						.append("circle")
						.attr("fill", "#f00")
						//	.attr("stroke", "#000")
						.attr("cx", function(d) {
							return xScale(d[0]);
						})
						.attr("cy", function(d) {
							return -yScale(d[1]) + h;		//inverse Y axis and move it down according to canvas height
						})
						.attr("class", function(d) {
							var selected = "";
							if (d[2] == 1)
								selected = " selected";
							return d[0] + " " +d[1]+ selected;
						})
						.attr("id", function() {
							return dotIdIterator++;
						})
						.attr("r", 2);

		g = svg.append("g");

		drawPolygons();


		function deleteData() {
			if (confirm({_dataexplorer.delete_confirm}))
				window.location.href={link delete!, id => $data->id}
		}

	</script>

</div><!-- /.container -->
