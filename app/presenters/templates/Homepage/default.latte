{block content}
<div class="container">


	<div id="editor-wrap" n:if="isset($points)">
		<div id="controls-panel" class="text-center">
			<button class="btn" onclick="send({link send!})">{_home.send}</button>
			<a href="{link default}">
				<button class="btn">{_home.skip}</button>
			</a>
		</div>
		<div id="editor-area"></div>
	</div>

	<div class="contextMenu" id="contextMenu" n:if="isset($points)">
		<ul>
			<li id="delete">{_home.delete_node}</li>
			<li id="deletePolygon">{_home.delete_polygon}</li>
		</ul>
	</div>

<script n:if="isset($points)">
//Width and height
var w = h = 800;
var axisPadding = 0;
var dataPadding = 30;
var g = null;
var pathIdIterator = 0;
var lineIdIterator = 0;
var paths = [];
var polygons = [];
var coords = [];
var nodesIdIterator = 0;
var lineCoords = [];
var LINE_SNAPPING_DIST = 30;
var canvasState = "DRAW";

var dataset = {$points};

//Create scale functions
var xScale = d3.scale.linear()
	.domain([d3.min(dataset, function(d) { return d[0]; }), d3.max(dataset, function(d) { return d[0]; })])
	.range([0 + dataPadding, w - dataPadding]);

var yScale = d3.scale.linear()
	.domain([d3.min(dataset, function(d) { return d[1]; }), d3.max(dataset, function(d) { return d[1]; })])
	.range([0 + dataPadding, h - dataPadding]);

//Create SVG element
var svg = d3.select("#editor-area")
				.append("svg")
				.attr("width", w)
				.attr("height", h)
				.attr("style", "border: 1px solid;")
				.on("mouseup", mouseup)
				.on("click", onclick)

line = d3.svg.line();


function onclick() {
	if (canvasState != "DRAW") {
		canvasState = "DRAW";
		return;
	}

	var m = d3.mouse(this);

	if (lineCoords.length && Math.sqrt(Math.pow(m[0]-lineCoords[0][0], 2) + Math.pow(m[1]-lineCoords[0][1], 2)) < LINE_SNAPPING_DIST) {
		terminatePath();
		lineCoords.length = 0;
		return;
	}

	lineCoords.push([m[0], m[1]]);

	line = svg.select("g").append("line")
					.attr("x1", m[0])
					.attr("y1", m[1])
					.attr("x2", m[0])
					.attr("y2", m[1])
					.attr("class", "path-"+pathIdIterator+" start-node-"+lineIdIterator+" end-node-"+(lineIdIterator+1));
	lineIdIterator++;

	svg.on("mousemove", mousemove);
}

function mousemove() {
	if (canvasState != "DRAW") return;
	if (!lineCoords.length) return;

	var m = d3.mouse(this);
	var endCoords = [m[0], m[1]];

	if (Math.sqrt(Math.pow(m[0]-lineCoords[0][0], 2) + Math.pow(m[1]-lineCoords[0][1], 2)) < LINE_SNAPPING_DIST) {
		endCoords[0] = lineCoords[0][0];
		endCoords[1] = lineCoords[0][1];
	}

	line.attr("x2", endCoords[0])
					.attr("y2",endCoords[1]);

	var raycastCoords = lineCoords.slice();
	raycastCoords[lineCoords.length] = endCoords;

	dot.each(function(d, i) {
		point = [d3.select(this).attr("cx"), d3.select(this).attr("cy")];
		if (pointInPolygon(point, raycastCoords)) {
			d3.select(this).classed("selected", true)
		} else {
			d3.select(this).classed("selected", false)
		}
	});
}

function terminatePath() {
	line.attr("x2", lineCoords[0][0])
					.attr("y2",lineCoords[0][1])
					.attr("class", "path-"+pathIdIterator +" start-node-"+ (lineIdIterator-1) +" end-node-0");

	var nodes = [];
	for (var i = 0; i < lineCoords.length; i++) {
		var point = g.append("svg:circle")
						.style("fill", "white")
						.attr("r", 6)
						.attr("stroke", "#000")
						.attr("stroke-width", "2")
						.attr("cx", lineCoords[i][0])
						.attr("cy", lineCoords[i][1])
						.attr("class", "node path-"+pathIdIterator+" node-"+i)
						.call(nodeDrag);

		nodes.push({
			0: lineCoords[i][0],
			1: lineCoords[i][1],
			id: i,
			point: point
		});
	}

	bindContextMenu();

	polygons[pathIdIterator] = { nodes : nodes };

	pathIdIterator++;
	lineIdIterator = 0;
}

function mouseup() {
//	svg.on("mousemove", null);
}

var nodeDrag = d3.behavior.drag();

nodeDrag.on("dragstart", function() {
	canvasState = "DRAG";
	d3.event.sourceEvent.stopPropagation(); // silence other listeners
	console.log('drag-start');
});

nodeDrag.on("drag", function() {
	d3.event.sourceEvent.stopPropagation(); // silence other listeners

	var classes = d3.select(this).attr("class").split(" ");
	var pathId = classes[1];
	var nodeId = classes[2];
	var pathIdNumber = pathId.split("-")[1];
	var nodeIdNumber = nodeId.split("-")[1];

	var m = d3.mouse(this);
	d3.select(this).attr({
		cx: m[0],
		cy: m[1]
	});

	var startLine = d3.select("line."+pathId+".start-"+nodeId);
	var endLine = d3.select("line."+pathId+".end-"+nodeId);

	startLine.attr("x1",m[0])
					.attr("y1",m[1]);

	endLine.attr("x2",m[0])
					.attr("y2",m[1]);

	polygons[pathIdNumber].nodes[nodeIdNumber][0] = m[0];
	polygons[pathIdNumber].nodes[nodeIdNumber][1] = m[1];

	console.log(polygons[pathIdNumber].nodes, polygons[pathIdNumber].nodes.length);

	testPointsInPolygon(pathIdNumber);
});

nodeDrag.on("dragend", function() {
	d3.event.sourceEvent.stopPropagation(); // silence other listeners
	console.log('drag-end');
});

function testPointsInPolygon(id) {
	dot.each(function() {
		var point = [d3.select(this).attr("cx"), d3.select(this).attr("cy")];
		if (pointInPolygon(point, polygons[id].nodes)) {
			d3.select(this).classed("selected", true)
		} else {
			d3.select(this).classed("selected", false)
		}
	});
}

function deletePolygon(target) {
	var classes = $(target).attr('class').split(" ");
	var pathId = classes[1];
	var pathIdNumber = pathId.split("-")[1];

	console.log(polygons);

	polygons[pathIdNumber] = {};
	d3.selectAll(".path-"+pathIdNumber).remove();
	dot.each(function() {
		d3.select(this).classed("selected", false)
	});
}

function deleteNode(target) {
	var classes = $(target).attr('class').split(" ");
	var pathId = classes[1];
	var nodeId = classes[2];
	var pathIdNumber = pathId.split("-")[1];
	var nodeIdNumber = nodeId.split("-")[1];

	if (polygons[pathIdNumber].nodes.length <= 3) {
		alert({_home.few_nodes});
		return;
	}

	polygons[pathIdNumber].nodes.splice(nodeIdNumber, 1);
	redrawPolygon(pathIdNumber);
}

function redrawPolygon(id) {
	var node, prevNode, line;

	d3.selectAll(".path-"+id).remove();

	for (var i = 1; i < polygons[id].nodes.length; i++) {
		node = polygons[id].nodes[i];
		prevNode = polygons[id].nodes[i - 1];

		line = svg.select("g").append("line")
						.attr("x1", prevNode[0])
						.attr("y1", prevNode[1])
						.attr("x2", node[0])
						.attr("y2", node[1])
						.attr("class", "path-"+id+" start-node-"+(i-1)+" end-node-"+i);
	}

	line = svg.select("g").append("line")
					.attr("x1", polygons[id].nodes[polygons[id].nodes.length-1][0])
					.attr("y1", polygons[id].nodes[polygons[id].nodes.length-1][1])
					.attr("x2", polygons[id].nodes[0][0])
					.attr("y2", polygons[id].nodes[0][1])
					.attr("class", "path-"+id+" start-node-"+(polygons[id].nodes.length-1)+" end-node-0");

	for (var i = 0; i < polygons[id].nodes.length; i++) {
		node = polygons[id].nodes[i];

		var node = g.append("svg:circle")
						.style("fill", "white")
						.attr("r", 6)
						.attr("stroke", "#000")
						.attr("stroke-width", "2")
						.attr("cx", node[0])
						.attr("cy", node[1])
						.attr("class", "node path-"+id+" node-"+i)
						.call(nodeDrag);
	}

	testPointsInPolygon(id);
	bindContextMenu();
}

var dotIdIterator = 0;
dot = svg.selectAll("circle")
	.data(dataset)
	.enter()
	.append("circle")
	.attr("fill", "#f00")
//	.attr("stroke", "#000")
	.attr("cx", function(d) {
		return xScale(d[0]);
	})
	.attr("cy", function(d) {
		return -yScale(d[1]) + h;		//inverse Y axis and move it down according to canvas height
	})
	.attr("class", function(d) {
		return d[0] + " " +d[1];
	})
	.attr("id", function() {
		return dotIdIterator++;
	})
	.attr("r", 2);

g = svg.append("g");

// from https://github.com/substack/point-in-polygon
pointInPolygon = function (point, vs) {
	// ray-casting algorithm based on
	// http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
	var xi, xj, i, intersect,
		x = point[0],
		y = point[1];
	inside = false;
	for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
		xi = vs[i][0],
			yi = vs[i][1],
			xj = vs[j][0],
			yj = vs[j][1];
		intersect = ((yi > y) != (yj > y))
		&& (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
		if (intersect) inside = !inside;
	}
	return inside;
};

d3.select("#clear").on("click", function() {
	dot.classed("selected", false);
	dragStart();
})

function getPointsInAllPolygons() {
	var points = [];
	for (var i = 0; i < polygons.length; i++) {
		if (polygons[i].nodes) {
			dot.each(function() {
				var point = [d3.select(this).attr("cx"), d3.select(this).attr("cy")];
				if (pointInPolygon(point, polygons[i].nodes)) {
					d3.select(this).classed("selected", true)
				}
			});
		}
	}

	dot.each(function() {
		var classes = d3.select(this).attr('class').split(" ");
		if (d3.select(this).classed("selected")) {
			points.push([classes[0], classes[1], 1]);
		} else {
			points.push([classes[0], classes[1], 0]);
		}
	});

	return points;
}

function getPolygonsRawData() {
	var rawPolygons = polygons.slice();
	for (var i = 0; i < rawPolygons.length; i++) {
		if (rawPolygons[i].nodes) {
			for (var j = 0; j < rawPolygons[i].nodes.length; j++) {
				delete(rawPolygons[i].nodes[j].point);
			}
		}
	}

	return rawPolygons;
}

function send(urlPath) {
	var points = getPointsInAllPolygons();
	var pointsString = JSON.stringify(points);
	var polygonsString = JSON.stringify(getPolygonsRawData());

	$.ajax({
		url: urlPath,
		method: 'POST',
		data: { polygons:polygonsString, points: pointsString, dataId: {$dataId} },
		beforeRegquest: function() {
			alert('Do you really want to send?');
		}
	});
}

/* ------------ Context menu --------------- */

function bindContextMenu() {
	$('.node').contextMenu('contextMenu', {
		bindings: {
			'delete': function (t) {
				deleteNode(t);
			},
			'deletePolygon': function (t) {
				deletePolygon(t);
			}
		}
	});
}

</script>

</div><!-- /.container -->
