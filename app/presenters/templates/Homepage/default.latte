{block content}
<div class="container">

<div id="editor-wrap">
  <div id="controls-panel" class="text-center">
	<button class="pull-left"><i class="fa fa-remove"></i></button>
	<button onclick="send({link send!})">SEND</button>
	<a href="{link default}" class="pull-right"><button>SKIP</button></a>
  </div>
  <div id="editor-area"></div>
</div>
    <script>
    	$(function(){
    		$('#editor-area').awesomeCursor('pencil');
    	});
    </script>
  <script n:if="isset($points)">
//Width and height
var w = h = 800;
var axisPadding = 0;
var dataPadding = 30;
var g = null;

var dataset = {$points};

//Create scale functions
var xScale = d3.scale.linear()
	.domain([d3.min(dataset, function(d) { return d[0]; }), d3.max(dataset, function(d) { return d[0]; })])
	.range([0 + dataPadding, w - dataPadding]);

var yScale = d3.scale.linear()
	.domain([d3.min(dataset, function(d) { return d[1]; }), d3.max(dataset, function(d) { return d[1]; })])
	.range([0 + dataPadding, h - dataPadding]);


var copy, coords = [];

line = d3.svg.line();

dragStart = function() {
	coords = [];
	{*g.selectAll("path").remove();*}
};

drawPath = function(terminator) {
	g.append("path").attr({
		d: line(coords)
	})

	if (terminator) {
		{*g.select("#terminator").remove();*}
		g.append("path").attr({
			class: "terminator",
			d: line([coords[0], coords[coords.length-1]])
		});
	}
};

dragMove = function() {
	dot.classed("selected", false);
	coords.push(d3.mouse(this));
	dot.each(function(d, i) {
		point = [d3.select(this).attr("cx"), d3.select(this).attr("cy")];
		if (pointInPolygon(point, coords)) {
			d3.select(this).classed("selected", true)
		}
	});
	drawPath();
};

dragEnd = function() {
	drawPath(true);
	d3.selectAll(".selected").attr("class", "inpath");
};

drag = d3.behavior.drag()
	.on("dragstart", dragStart)
	.on("drag", dragMove)
	.on("dragend", dragEnd);

//Create SVG element
var svg = d3.select("#editor-area")
	.append("svg")
	.attr("width", w)
	.attr("height", h)
	.call(drag);

g = svg.append("g")

dot = svg.selectAll("circle")
	.data(dataset)
	.enter()
	.append("circle")
	.attr("fill", "#f00")
	.attr("stroke", "#000")
	.attr("cx", function(d) {
		return xScale(d[0]);
	})
	.attr("cy", function(d) {
		return -yScale(d[1]) + h;		//inverse Y axis and move it down according to canvas height
	})
	.attr("r", 3);

console.log('minX',d3.min(dataset, function(d) { return d[0]; }));
console.log('maxX',d3.max(dataset, function(d) { return d[0]; }));
console.log('minY',d3.min(dataset, function(d) { return d[1]; }));
console.log('maxY',d3.max(dataset, function(d) { return d[1]; }));

// from https://github.com/substack/point-in-polygon
pointInPolygon = function (point, vs) {
	// ray-casting algorithm based on
	// http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
	var xi, xj, i, intersect,
		x = point[0],
		y = point[1];
	inside = false;
	for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
		xi = vs[i][0],
			yi = vs[i][1],
			xj = vs[j][0],
			yj = vs[j][1];
		intersect = ((yi > y) != (yj > y))
		&& (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
		if (intersect) inside = !inside;
	}
	return inside;
};

d3.select("#clear").on("click", function() {
	dot.classed("selected", false);
	dragStart();
})

send = function(urlPath) {
	var paths = [];
	$("#editor-area svg g .terminator").each(function(){
		var path = $(this).prev().attr('d') + $(this).attr('d');
		paths.push(path);
	});
	console.log(paths);

	var hashTags = JSON.stringify(paths);
	$.ajax({
		url: urlPath,
		method: 'POST',
		data: { paths: paths, dataId: {$dataId} },
		beforeRegquest: function() {
			alert('Do you really want to send?');
		}
	});
}

</script>

</div><!-- /.container -->
